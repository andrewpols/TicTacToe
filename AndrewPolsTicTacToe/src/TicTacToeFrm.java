/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author andrewpols
 */

// This program takes a TicTacToe algorithm designed for two players and applies
// a GUI in NetBeans. 
// March 18 - March 20, 2024
// Andrew Pols - ICS4U

// V2 UPDATE: March 22, 2024

// import necessary utilities/packages
import java.util.Arrays;
import java.awt.Color;
import java.util.Timer;
import java.util.TimerTask;



public class TicTacToeFrm extends javax.swing.JFrame {
    
    /**
     * Creates new form TicTacToeFrm
     */
    public TicTacToeFrm() {
        initComponents(); // initialize jFrame components
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        TitleLabel = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        player1Label = new javax.swing.JLabel();
        player2Label = new javax.swing.JLabel();
        playerTurnLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        TopLeftPick = new javax.swing.JButton();
        TopLeftLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        TopMiddlePick = new javax.swing.JButton();
        TopMiddleLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        TopRightPick = new javax.swing.JButton();
        TopRightLabel = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        MiddleLeftPick = new javax.swing.JButton();
        MiddleLeftLabel = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        CentrePick = new javax.swing.JButton();
        CentreLabel = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        MiddleRightPick = new javax.swing.JButton();
        MiddleRightLabel = new javax.swing.JLabel();
        jPanel13 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        BottomLeftPick = new javax.swing.JButton();
        BottomLeftLabel = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        BottomMiddlePick = new javax.swing.JButton();
        BottomMiddleLabel = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        BottomRightPick = new javax.swing.JButton();
        BottomRightLabel = new javax.swing.JLabel();
        GameEndLabel = new javax.swing.JLabel();
        playAgainBtn = new javax.swing.JButton();
        winCounterLabel = new javax.swing.JLabel();
        jPanel17 = new javax.swing.JPanel();
        playerOneWinsLabel = new javax.swing.JLabel();
        playerTwoWinsLabel = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        player1Name = new javax.swing.JTextField();
        player2Name = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        timerLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1000, 800));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        TitleLabel.setFont(new java.awt.Font("Silom", 0, 36)); // NOI18N
        TitleLabel.setText("TicTacToe");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(35, 0, 0, 0);
        getContentPane().add(TitleLabel, gridBagConstraints);

        player1Label.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 16)); // NOI18N
        player1Label.setText("Player 1: X");

        player2Label.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 16)); // NOI18N
        player2Label.setText("Player 2: O");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(player1Label)
                .addGap(200, 200, 200)
                .addComponent(player2Label)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(player1Label)
                    .addComponent(player2Label))
                .addGap(41, 41, 41))
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipady = -35;
        getContentPane().add(jPanel11, gridBagConstraints);
        jPanel11.setVisible(false);

        playerTurnLabel.setFont(new java.awt.Font("Skia", 0, 15)); // NOI18N
        playerTurnLabel.setForeground(Color.RED);
        playerTurnLabel.setText("Player Turn: X ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipady = 15;
        getContentPane().add(playerTurnLabel, gridBagConstraints);
        playerTurnLabel.setVisible(false);

        jPanel1.setLayout(new java.awt.GridLayout(3, 3));

        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 3, 3, new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        TopLeftPick.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 13)); // NOI18N
        TopLeftPick.setText("Pick Here");
        TopLeftPick.setLocation(new java.awt.Point(-32668, -32729));
        TopLeftPick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TopLeftPickActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(40, 60, 40, 60);
        jPanel2.add(TopLeftPick, gridBagConstraints);

        TopLeftLabel.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 13)); // NOI18N
        TopLeftLabel.setText("TopLeftLabel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(40, 60, 40, 60);
        jPanel2.add(TopLeftLabel, gridBagConstraints);
        TopLeftLabel.setVisible(false);

        jPanel1.add(jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 3, 0, new java.awt.Color(0, 0, 0)));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        TopMiddlePick.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 13)); // NOI18N
        TopMiddlePick.setText("Pick Here");
        TopMiddlePick.setLocation(new java.awt.Point(-32514, -32727));
        TopMiddlePick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TopMiddlePickActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(40, 80, 40, 80);
        jPanel3.add(TopMiddlePick, gridBagConstraints);

        TopMiddleLabel.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 13)); // NOI18N
        TopMiddleLabel.setText("TopMiddleLabel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(40, 60, 40, 60);
        jPanel3.add(TopMiddleLabel, gridBagConstraints);
        TopMiddleLabel.setVisible(false);

        jPanel1.add(jPanel3);

        jPanel4.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 3, 3, 0, new java.awt.Color(0, 0, 0)));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        TopRightPick.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 13)); // NOI18N
        TopRightPick.setText("Pick Here");
        TopRightPick.setLocation(new java.awt.Point(-32359, -32727));
        TopRightPick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TopRightPickActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(40, 60, 40, 60);
        jPanel4.add(TopRightPick, gridBagConstraints);

        TopRightLabel.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 13)); // NOI18N
        TopRightLabel.setText("TopRightLabel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(40, 60, 40, 60);
        jPanel4.add(TopRightLabel, gridBagConstraints);
        TopRightLabel.setVisible(false);

        jPanel1.add(jPanel4);

        jPanel5.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 3, 3, new java.awt.Color(0, 0, 0)));
        jPanel5.setLayout(new java.awt.GridBagLayout());

        MiddleLeftPick.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 13)); // NOI18N
        MiddleLeftPick.setText("Pick Here");
        MiddleLeftPick.setLocation(new java.awt.Point(-32668, -32610));
        MiddleLeftPick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MiddleLeftPickActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(40, 60, 40, 60);
        jPanel5.add(MiddleLeftPick, gridBagConstraints);

        MiddleLeftLabel.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 13)); // NOI18N
        MiddleLeftLabel.setText("MiddleLeftLabel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(40, 60, 40, 60);
        jPanel5.add(MiddleLeftLabel, gridBagConstraints);
        MiddleLeftLabel.setVisible(false);

        jPanel1.add(jPanel5);

        jPanel6.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 3, 0, new java.awt.Color(0, 0, 0)));
        jPanel6.setLayout(new java.awt.GridBagLayout());

        CentrePick.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 13)); // NOI18N
        CentrePick.setText("Pick Here");
        CentrePick.setLocation(new java.awt.Point(-32514, -32611));
        CentrePick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CentrePickActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(40, 60, 40, 60);
        jPanel6.add(CentrePick, gridBagConstraints);

        CentreLabel.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 13)); // NOI18N
        CentreLabel.setText("CentreLabel");
        CentreLabel.setLocation(new java.awt.Point(-32514, -32510));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(40, 60, 40, 60);
        jPanel6.add(CentreLabel, gridBagConstraints);
        CentreLabel.setVisible(false);

        jPanel1.add(jPanel6);

        jPanel7.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 3, 3, 0, new java.awt.Color(0, 0, 0)));
        jPanel7.setLayout(new java.awt.GridBagLayout());

        MiddleRightPick.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 13)); // NOI18N
        MiddleRightPick.setText("Pick Here");
        MiddleRightPick.setLocation(new java.awt.Point(-32359, -32610));
        MiddleRightPick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MiddleRightPickActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(40, 60, 40, 60);
        jPanel7.add(MiddleRightPick, gridBagConstraints);

        MiddleRightLabel.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 13)); // NOI18N
        MiddleRightLabel.setText("MiddleRightLabel");
        MiddleRightLabel.setLocation(new java.awt.Point(-32359, -32510));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(40, 60, 40, 60);
        jPanel7.add(MiddleRightLabel, gridBagConstraints);
        MiddleRightLabel.setVisible(false);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel7.add(jPanel13, new java.awt.GridBagConstraints());

        jPanel1.add(jPanel7);

        jPanel8.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 0, 3, new java.awt.Color(0, 0, 0)));
        jPanel8.setLayout(new java.awt.GridBagLayout());

        BottomLeftPick.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 13)); // NOI18N
        BottomLeftPick.setText("Pick Here");
        BottomLeftPick.setLocation(new java.awt.Point(-32668, -32497));
        BottomLeftPick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BottomLeftPickActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(40, 60, 40, 60);
        jPanel8.add(BottomLeftPick, gridBagConstraints);

        BottomLeftLabel.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 13)); // NOI18N
        BottomLeftLabel.setText("BottomLeftLabel");
        BottomLeftLabel.setLocation(new java.awt.Point(-32668, -32394));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(40, 60, 40, 60);
        jPanel8.add(BottomLeftLabel, gridBagConstraints);
        BottomLeftLabel.setVisible(false);

        jPanel1.add(jPanel8);

        jPanel9.setLayout(new java.awt.GridBagLayout());

        BottomMiddlePick.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 13)); // NOI18N
        BottomMiddlePick.setText("Pick Here");
        BottomMiddlePick.setLocation(new java.awt.Point(-32514, -32497));
        BottomMiddlePick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BottomMiddlePickActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(40, 60, 40, 60);
        jPanel9.add(BottomMiddlePick, gridBagConstraints);

        BottomMiddleLabel.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 13)); // NOI18N
        BottomMiddleLabel.setText("BottomMiddleLabel");
        BottomMiddleLabel.setLocation(new java.awt.Point(-32514, -32394));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(40, 60, 40, 60);
        jPanel9.add(BottomMiddleLabel, gridBagConstraints);
        BottomMiddleLabel.setVisible(false);

        jPanel1.add(jPanel9);

        jPanel10.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 3, 0, 0, new java.awt.Color(0, 0, 0)));
        jPanel10.setLayout(new java.awt.GridBagLayout());

        BottomRightPick.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 13)); // NOI18N
        BottomRightPick.setText("Pick Here");
        BottomRightPick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BottomRightPickActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(40, 60, 40, 60);
        jPanel10.add(BottomRightPick, gridBagConstraints);

        BottomRightLabel.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 13)); // NOI18N
        BottomRightLabel.setText("BottomRightLabel");
        BottomRightLabel.setLocation(new java.awt.Point(-32359, -32395));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(40, 60, 40, 60);
        jPanel10.add(BottomRightLabel, gridBagConstraints);
        BottomRightLabel.setVisible(false);

        jPanel1.add(jPanel10);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(0, 60, 20, 60);
        getContentPane().add(jPanel1, gridBagConstraints);
        jPanel1.setVisible(false);

        GameEndLabel.setFont(new java.awt.Font("Copperplate", 0, 24)); // NOI18N
        GameEndLabel.setText("GameEndLabel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 5, 0);
        getContentPane().add(GameEndLabel, gridBagConstraints);
        GameEndLabel.setVisible(false);

        playAgainBtn.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 13)); // NOI18N
        playAgainBtn.setText("Play Again!");
        playAgainBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        playAgainBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playAgainBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.ipadx = 25;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 45, 0);
        getContentPane().add(playAgainBtn, gridBagConstraints);
        playAgainBtn.setVisible(false);

        winCounterLabel.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 16)); // NOI18N
        winCounterLabel.setText("Win Counter:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 0, 0);
        getContentPane().add(winCounterLabel, gridBagConstraints);
        winCounterLabel.setVisible(false);

        jPanel17.setLayout(new java.awt.GridBagLayout());

        playerOneWinsLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 15)); // NOI18N
        playerOneWinsLabel.setText("Player One: 0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 40);
        jPanel17.add(playerOneWinsLabel, gridBagConstraints);

        playerTwoWinsLabel.setFont(new java.awt.Font("Bodoni 72 Smallcaps", 0, 15)); // NOI18N
        playerTwoWinsLabel.setText("Player Two: 0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 40, 0, 40);
        jPanel17.add(playerTwoWinsLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 15, 0);
        getContentPane().add(jPanel17, gridBagConstraints);
        jPanel17.setVisible(false);

        jPanel12.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Posterama1919W01-Bold", 0, 24)); // NOI18N
        jLabel1.setText("Welcome to TicTacToe!");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(30, 30, 30, 30);
        jPanel12.add(jLabel1, gridBagConstraints);

        jPanel14.setLayout(new java.awt.GridBagLayout());

        jLabel2.setFont(new java.awt.Font("PT Serif Caption", 0, 13)); // NOI18N
        jLabel2.setText("Player 1 Name (X):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 30, 30, 30);
        jPanel14.add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("PT Serif Caption", 0, 13)); // NOI18N
        jLabel3.setText("Player 2 Name (O):");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(30, 30, 30, 30);
        jPanel14.add(jLabel3, gridBagConstraints);

        player1Name.setText("Enter Player Name");
        player1Name.setMinimumSize(new java.awt.Dimension(128, 60));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel14.add(player1Name, gridBagConstraints);

        player2Name.setText("Enter Player Name");
        player2Name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                player2NameActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel14.add(player2Name, gridBagConstraints);

        jLabel4.setText("Random Player Start:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel14.add(jLabel4, gridBagConstraints);
        jLabel4.setVisible(false);

        jLabel5.setText("X");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(15, 0, 0, 0);
        jPanel14.add(jLabel5, gridBagConstraints);
        jLabel5.setVisible(false);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 30, 30, 30);
        jPanel12.add(jPanel14, gridBagConstraints);

        jButton1.setForeground(new java.awt.Color(51, 153, 0));
        jButton1.setText("Play!");
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 40;
        gridBagConstraints.ipady = 10;
        jPanel12.add(jButton1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(jPanel12, gridBagConstraints);

        timerLabel.setFont(new java.awt.Font("PT Mono", 0, 16)); // NOI18N
        timerLabel.setText("Timer: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.ipady = 10;
        getContentPane().add(timerLabel, gridBagConstraints);
        timerLabel.setVisible(false);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Use ActionPerformed instead of MouseClicked since it processes inputs MUCH faster
    private void TopLeftPickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TopLeftPickActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:

        // first paramter inputs row number in array
        // second paramter inputs column number in array
        // See gameBoard[][] array for further details
        onClick(0, 0);
        TopLeftPick.setVisible(false);

        int playerNumber = getPlayerNumber();

        // Track and Label previous moves
        if (playerNumber == 0) {
            TopLeftLabel.setText("X");
            TopLeftLabel.setForeground(Color.RED);
        } else {
            TopLeftLabel.setText("O");
            TopLeftLabel.setForeground(Color.BLUE);
        }

        TopLeftLabel.setVisible(true); // Now make it visible
    }//GEN-LAST:event_TopLeftPickActionPerformed

    private void TopMiddlePickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TopMiddlePickActionPerformed
        // TODO add your handling code here:
        // See TopLeftPickMouseClicked() for further details
        onClick(0, 1);
        
        TopMiddlePick.setVisible(false);
        
        int playerNumber = getPlayerNumber();
        
        if (playerNumber == 0) {
            TopMiddleLabel.setText("X");
            TopMiddleLabel.setForeground(Color.RED);
        } else {
            TopMiddleLabel.setText("O");
            TopMiddleLabel.setForeground(Color.BLUE);
        }
        
        TopMiddleLabel.setVisible(true);
    }//GEN-LAST:event_TopMiddlePickActionPerformed

    private void TopRightPickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TopRightPickActionPerformed
        // TODO add your handling code here:
        // See TopLeftPickMouseClicked() for further details

        onClick(0, 2);
        TopRightPick.setVisible(false);
        
        int playerNumber = getPlayerNumber();
    
        if (playerNumber == 0) {
            TopRightLabel.setText("X");
            TopRightLabel.setForeground(Color.RED);
        } else {
            TopRightLabel.setText("O");
            TopRightLabel.setForeground(Color.BLUE);
        }
        
        TopRightLabel.setVisible(true);
       
    }//GEN-LAST:event_TopRightPickActionPerformed

    private void MiddleLeftPickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MiddleLeftPickActionPerformed
        // TODO add your handling code here:
        // See TopLeftPickMouseClicked() for further details
         onClick(1, 0);
         MiddleLeftPick.setVisible(false);
        
        int playerNumber = getPlayerNumber();
        
        if (playerNumber == 0) {
            MiddleLeftLabel.setText("X");
            MiddleLeftLabel.setForeground(Color.RED);
        } else {
            MiddleLeftLabel.setText("O");
            MiddleLeftLabel.setForeground(Color.BLUE);
        }
        
        MiddleLeftLabel.setVisible(true);
    }//GEN-LAST:event_MiddleLeftPickActionPerformed

    private void CentrePickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CentrePickActionPerformed
        // TODO add your handling code here:
        // See TopLeftPickMouseClicked() for further details
        onClick(1, 1);
        
        CentrePick.setVisible(false);
        
        int playerNumber = getPlayerNumber();
        
        if (playerNumber == 0) {
            CentreLabel.setText("X");
            CentreLabel.setForeground(Color.RED);
        } else {
            CentreLabel.setText("O");
            CentreLabel.setForeground(Color.BLUE);
        }
        
        CentreLabel.setVisible(true);
    }//GEN-LAST:event_CentrePickActionPerformed

    private void MiddleRightPickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MiddleRightPickActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        // See TopLeftPickMouseClicked() for further details
        onClick(1, 2);
        MiddleRightPick.setVisible(false);
        
        int playerNumber = getPlayerNumber();
        
        if (playerNumber == 0) {
            MiddleRightLabel.setText("X");
            MiddleRightLabel.setForeground(Color.RED);
        } else {
            MiddleRightLabel.setText("O");
            MiddleRightLabel.setForeground(Color.BLUE);
        }
        
        MiddleRightLabel.setVisible(true);
    }//GEN-LAST:event_MiddleRightPickActionPerformed

    private void BottomLeftPickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BottomLeftPickActionPerformed
        // TODO add your handling code here:
        // See TopLeftPickMouseClicked() for further details
        onClick(2, 0);
        BottomLeftPick.setVisible(false);
        
        int playerNumber = getPlayerNumber();
        
        if (playerNumber == 0) {
            BottomLeftLabel.setText("X");
            BottomLeftLabel.setForeground(Color.RED);

        } else {
            BottomLeftLabel.setText("O");
            BottomLeftLabel.setForeground(Color.BLUE);
        }
        
        BottomLeftLabel.setVisible(true);
    }//GEN-LAST:event_BottomLeftPickActionPerformed

    private void BottomMiddlePickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BottomMiddlePickActionPerformed
        // TODO add your handling code here:
        // See TopLeftPickMouseClicked() for further details
        onClick(2, 1);
        BottomMiddlePick.setVisible(false);
        
        int playerNumber = getPlayerNumber();
        
        if (playerNumber == 0) {
            BottomMiddleLabel.setText("X");
            BottomMiddleLabel.setForeground(Color.RED);
        } else {
            BottomMiddleLabel.setText("O");
            BottomMiddleLabel.setForeground(Color.BLUE);
        }
        
        BottomMiddleLabel.setVisible(true);
    }//GEN-LAST:event_BottomMiddlePickActionPerformed

    private void BottomRightPickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BottomRightPickActionPerformed
        // TODO add your handling code here:
        // See TopLeftPickMouseClicked() for further details
        onClick(2, 2);
        BottomRightPick.setVisible(false);
        
        int playerNumber = getPlayerNumber();
        
        if (playerNumber == 0) {
            BottomRightLabel.setText("X");
            BottomRightLabel.setForeground(Color.RED);
        } else {
            BottomRightLabel.setText("O");
            BottomRightLabel.setForeground(Color.BLUE);
        }
        
        BottomRightLabel.setVisible(true);
    }//GEN-LAST:event_BottomRightPickActionPerformed

    private void playAgainBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playAgainBtnActionPerformed
        // TODO add your handling code here:        
        
        // Reinitialize all starting variables
        moveCount = 0;
        gameOver = false;
        tie = false;
        
        
        // Re-initialize ticArray values to 0 by iterating through each dimension of the array
        for (int i=0; i<3; i++) {
            for (int j=0; j<3; j++) {
                ticArray[i][j] = 0;
            }
        }
        
        // Reinitialize gameBoard values to 0 by iterating through each dimension of the array
        for (int i=0; i<2; i++) {
            for (int j=0; j<3; j++) {
                for (int k=0; k<2; k++) {
                   gameBoard[i][j][k] = 0; 
                }                
            }
        }
        
        for (int i=0; i<2; i++) {
            for (int j=0; j<2; j++) {
                gameBoard[2][i][j] = 0;
            }
        }
        
        // enable "pick" buttons and reset player turn label to starting settings
        enableButtons();
        
        // player turn label logic
        if (player1) {
        playerTurnLabel.setText("PlayerTurn: X");
        playerTurnLabel.setForeground(Color.RED);
      } else {
        playerTurnLabel.setText("PlayerTurn: O");
        playerTurnLabel.setForeground(Color.BLUE);
      }
        playerTurnLabel.setVisible(true);
        
        
        
        // Disable Play Again Button, Winner Label, and X/O's
        playAgainBtn.setVisible(false);
        counter = 15;
        timerLabel.setVisible(true);
        GameEndLabel.setVisible(false);
        disableText();
        
    }//GEN-LAST:event_playAgainBtnActionPerformed

    private void player2NameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_player2NameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_player2NameActionPerformed

    
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:     
        player1Label.setText(player1Name.getText() + ": X");
        player2Label.setText(player2Name.getText() + ": O");
                
        
       
        playerTurnLabel.setVisible(true);
        jButton1.setVisible(false);
        
        timer2.scheduleAtFixedRate(task2, 0, 300);
        
        
        
        if (counter2 == 0) {
            
        }
             
        
        
    }//GEN-LAST:event_jButton1ActionPerformed
    
Timer timer = new Timer();

Timer timer2 = new Timer();

int counter2 = 10;


TimerTask task = new TimerTask() {
        

        
        @Override
        public void run() {
            if (counter>0) {
                timerLabel.setText("Timer: " + counter);
                counter--; 
            } else {
                timerLabel.setText("Turn Lost!");
                player1 = !player1;
                setPlayerLabel();
                counter = 15;
                // reset turn to next player here
            }
           
        }
    };

    TimerTask task2 = new TimerTask() {


    
            @Override
            public void run() {     
                if (counter2 > 0) {
                  if (counter2 % 2 == 0) {
                    playerTurnLabel.setText("Player Turn: X");
                    playerTurnLabel.setForeground(Color.RED);
                  } else {
                    playerTurnLabel.setText("Player Turn: O");
                    playerTurnLabel.setForeground(Color.BLUE);
                  }
                
                counter2--;
                // reset turn to next player here               
                
            }  else {
                timer2.cancel();
                 
                timerLabel.setVisible(true);
                jPanel12.setVisible(false);
                jPanel11.setVisible(true);
                jLabel4.setVisible(true);
                jPanel1.setVisible(true);
                winCounterLabel.setVisible(true);
                jPanel17.setVisible(true);

                timerCountdown();
                
             }
                
             if (playerTurnLabel.getText().equals("Player Turn: X")) {
                 player1 = true;
            } else {
                 player1 = false;
             }
          }
            
        };

public void timerCountdown() {   
    
    timer.scheduleAtFixedRate(task, 0, 1000);

    
}

public void setPlayerLabel() {
     // Update the playerTurn labels
      if (player1) {
        playerTurnLabel.setText("PlayerTurn: X");
        playerTurnLabel.setForeground(Color.RED);
      } else {
        playerTurnLabel.setText("PlayerTurn: O");
        playerTurnLabel.setForeground(Color.BLUE);
      }
}
    
    
    
   
// ^^^^^^^^^^^^^^^^^^^^^^
    // JFRAME COMPONENTS CODE
    
    ////////////////////////////////////////////////////////////////////////////
    
    // TICTACTOE ALGORITHM CODE 
    // vvvvvvvvvvvvvvvvvvvvvvvv
    
    // initialize starting variables
    int moveCount = 0;
    static boolean gameOver = false;
    static boolean tie = false; 
    
    
        static boolean player1 = true;
    int counter = 15;
    
    
    int playerOneWins = 0;
    int playerTwoWins = 0;

    // This is the 2D array that represents the moves on the gameboard
    // An available move is represented by 0
    // When a move is made on the index of the array, we update its element to 1
    // This allows us to have a checking system so that no repeated moves are made
    int[][] ticArray = {
      {0, 0, 0},
      {0, 0, 0},
      {0, 0, 0}
    };
   
    
    // This is a 3D array that represents the COUNTER values of the game
    // The first outer array represents rows, the second array represents columns,
    // and the third represents diagonals.
    
    // The 2D aspect (the "inner" array) handles the row/column/diagonal number
    
    // The 1D aspect (the "innermost" array) handles the user number for the respective row/column/diagonal
    
    // eg. gameBoard[1][2][0] represents the SECOND[2] COLUMN[1] assigned to PLAYER 1[0]
    int[][][] gameBoard = {
      { 
        { 0, 0 }, { 0, 0 }, { 0, 0 }
      }, 

      {
        { 0, 0 }, { 0, 0 }, { 0, 0 }
      },

      {
        { 0, 0 }, { 0, 0 }
      }
    };

    public int getPlayerNumber() {
        
      // Previously we used modulo to determine player number
      // Now we just track if it is player1's turn or not
      if (player1) {
        return 1;
      } else {
        return 0;
      }

    }
    
    
    public void inputMove(int userRow, int userColumn) {
      moveCount++; // Update the move counter
      player1 = !player1;
      
      counter = 15;
         
      
      
      int playerNumber = getPlayerNumber(); 
      
      System.out.println("Player Turn: " + (playerNumber + 1));
      
      // Update the playerTurn labels
      if (player1) {
        playerTurnLabel.setText("PlayerTurn: X");
        playerTurnLabel.setForeground(Color.RED);
      } else {
        playerTurnLabel.setText("PlayerTurn: O");
        playerTurnLabel.setForeground(Color.BLUE);
      }
      System.out.println("Move Number:" + moveCount);

      // Check to see if the move has been played before
      checkMoveValidity(userRow, userColumn);
    }
    
    
    public void checkMoveValidity(int userRow, int userColumn) {
      int playerNumber = getPlayerNumber();
      boolean diagonalPossible = false; // Read further for more details

      if (ticArray[userRow][userColumn] == 0) {
        ticArray[userRow][userColumn] = 1; // Update the array so that this move is now accounted for

        gameBoard[0][userRow][playerNumber]++; // Update the counter for the selected user row 
        gameBoard[1][userColumn][playerNumber]++; // Update the counter for the selected user column 
        
        
        // Condition for both possible diagonals
        // Notice the pattern that when userRow == userColumn, we are on a possible diagonal tile
        // Also, when userRow + userColumn == 2, we are on a possible diagonal tile
        
        
        if (userRow == userColumn && userColumn + userRow == 2) {
          gameBoard[2][0][playerNumber]++; // Since both conditions are satisfied (we are on the middle tile),
          gameBoard[2][1][playerNumber]++; // update BOTH counters for diagonals
          diagonalPossible = true;
        } else if (userRow == userColumn) {
          gameBoard[2][0][playerNumber]++; // Only update one diagonal condition
          diagonalPossible = true;
        } else if (userRow + userColumn == 2) {
          gameBoard[2][1][playerNumber]++; // Update diagonal
          diagonalPossible = true;
        }


        System.out.println(Arrays.deepToString(gameBoard));

      } else {
        System.out.println("Move already done");
        moveCount--; // If a move is not possible because the element "1" is in the array, we disallow the move and subtract move count by one
         
      }

      checkWinner(userRow, userColumn, diagonalPossible); // Check possible win
    }

    public void checkWinner(int userRow, int userColumn, boolean diagonalPossible) {
      int playerNumber = getPlayerNumber();

      // Check Rows, columns, diagonal
      // We only check the last inputted row (userRow/userColumn) because a win can only happen on the last played row/column
      if (gameBoard[0][userRow][playerNumber] == 3 || // If the counter for a row is 3, a win must have happened
          gameBoard[1][userColumn][playerNumber] == 3) 
      {
        gameOver = true; // game over condition
        return;
      } 
      
      // Recall diagonalPossible on checkMoveValidity
      // If the last move was on a diagonal tile, WE WILL check.
      // If not, we do not check b/c a diagonal win would be impossible
      else if (diagonalPossible) {
          
        // Iterate through the diagonal values and check if they equal 3
        for (int i = 0; i < 2; i++) {
          if (gameBoard[2][i][playerNumber] == 3) {
            gameOver = true;
            return;
          }
        }
      } 

      // Check tie
      // If a 0 exists in ticArray, the game cannot be over    
      for (int i=0; i<3; i++) {
          for (int j=0; j<3; j++) {
              if (ticArray[i][j] == 0) {
                  tie = false;
                  return;
              }
              else {
                  tie = true;
              }
          }
      }
      
    }

    public void onClick(int userRow, int userColumn) {
       if (!gameOver) {
         // each button has a coordinate assigned to it with a respective user row and column
         inputMove(userRow, userColumn); // function to run when a button is clicked
         
       }
       
       
       // self-explanatory
       // If result is a tie, update labels and disable unnecessary elements
       if (tie == true) {
         System.out.println("Tie!");
         GameEndLabel.setText("Tie!");
         GameEndLabel.setVisible(true);
         // Show Play Again Button
         playAgainBtn.setVisible(true);
         playerTurnLabel.setVisible(false);
         
         disableButtons();
         
         timerLabel.setVisible(false);
         
         // if the result is a win, we update labels with who won and disable unnecessary elements
       } else if (gameOver==true) {
         // playerNumber returns either 0 or 1 since we used getPlayerNumber() 
         // for indices. To get Player 1 or Player 2, just add 1 to getPlayerNumber()
         int playerNumber = getPlayerNumber() + 1;
         String winnerName;
         
         if (playerNumber == 1) {
             winnerName = player1Name.getText();
         } else {
            winnerName = player2Name.getText();
         }
           
         System.out.println("Winner! Player " + playerNumber + ", " + winnerName );
         GameEndLabel.setText("Winner! Player " + playerNumber + ", " + winnerName );
         GameEndLabel.setVisible(true);
         // Show Play Again Button
         playAgainBtn.setVisible(true);
         playerTurnLabel.setVisible(false);
         
         // Check who won by getting playerNumber
         if (playerNumber == 1) {
             playerOneWins++;
             playerOneWinsLabel.setText("Player One: " + playerOneWins);
         } else {
             playerTwoWins++;
             playerTwoWinsLabel.setText("Player Two: " + playerTwoWins);
         }
         
         disableButtons();
         timerLabel.setVisible(false);
        }
    }
    
    // function to make buttons invisible (used on game end)
    public void disableButtons() {
        TopLeftPick.setVisible(false);
        TopMiddlePick.setVisible(false);
        TopRightPick.setVisible(false);
        MiddleLeftPick.setVisible(false);
        CentrePick.setVisible(false);
        MiddleRightPick.setVisible(false);
        BottomLeftPick.setVisible(false);
        BottomMiddlePick.setVisible(false);
        BottomRightPick.setVisible(false);
    }
    
    public void enableButtons() {
        TopLeftPick.setVisible(true);
        TopMiddlePick.setVisible(true);
        TopRightPick.setVisible(true);
        MiddleLeftPick.setVisible(true);
        CentrePick.setVisible(true);
        MiddleRightPick.setVisible(true);
        BottomLeftPick.setVisible(true);
        BottomMiddlePick.setVisible(true);
        BottomRightPick.setVisible(true);
    }
  
    public void disableText(){
        TopLeftLabel.setVisible(false);
        TopMiddleLabel.setVisible(false);
        TopRightLabel.setVisible(false);
        MiddleLeftLabel.setVisible(false);
        CentreLabel.setVisible(false);
        MiddleRightLabel.setVisible(false);
        BottomLeftLabel.setVisible(false);
        BottomMiddleLabel.setVisible(false);
        BottomRightLabel.setVisible(false);
    }

    public String toString() {
      return Arrays.deepToString(gameBoard);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TicTacToeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TicTacToeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TicTacToeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TicTacToeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TicTacToeFrm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BottomLeftLabel;
    private javax.swing.JButton BottomLeftPick;
    private javax.swing.JLabel BottomMiddleLabel;
    private javax.swing.JButton BottomMiddlePick;
    private javax.swing.JLabel BottomRightLabel;
    private javax.swing.JButton BottomRightPick;
    private javax.swing.JLabel CentreLabel;
    private javax.swing.JButton CentrePick;
    private javax.swing.JLabel GameEndLabel;
    private javax.swing.JLabel MiddleLeftLabel;
    private javax.swing.JButton MiddleLeftPick;
    private javax.swing.JLabel MiddleRightLabel;
    private javax.swing.JButton MiddleRightPick;
    private javax.swing.JLabel TitleLabel;
    private javax.swing.JLabel TopLeftLabel;
    private javax.swing.JButton TopLeftPick;
    private javax.swing.JLabel TopMiddleLabel;
    private javax.swing.JButton TopMiddlePick;
    private javax.swing.JLabel TopRightLabel;
    private javax.swing.JButton TopRightPick;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton playAgainBtn;
    private javax.swing.JLabel player1Label;
    private javax.swing.JTextField player1Name;
    private javax.swing.JLabel player2Label;
    private javax.swing.JTextField player2Name;
    private javax.swing.JLabel playerOneWinsLabel;
    private javax.swing.JLabel playerTurnLabel;
    private javax.swing.JLabel playerTwoWinsLabel;
    private javax.swing.JLabel timerLabel;
    private javax.swing.JLabel winCounterLabel;
    // End of variables declaration//GEN-END:variables
}
